{"version":3,"sources":["Projects.js","Circle.js","Ring.js","App.js","serviceWorker.js","index.js"],"names":["Projects","children","className","Circle","text","size","ringRadius","angle","styles","spinDirection","spin","center","useState","cAngle","setAngle","hovering","setHover","useEffect","interval","setInterval","clearInterval","style","width","height","radius","cx","cy","Math","PI","x","cos","y","sin","xyOnCircle","top","left","borderColor","boxShadow","onMouseEnter","onMouseLeave","noop","Ring","color","InnerRing","circleSize","ringSize","borderWidth","RingTwo","App","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.faa36639.chunk.js","sourcesContent":["import React from 'react'\nimport './Projects.css'\n\nconst Projects = ({ children }) => {\n  return (\n    <div className=\"projects\">\n      {children}\n    </div>\n  )\n}\n\nexport default Projects\n","import React, { useState, useEffect } from 'react'\nimport './Circle.css'\n\nconst xyOnCircle = (radius, angle, cx, cy) => {\n  angle = angle * (Math.PI / 180)\n  const x = cx + radius * Math.cos(angle)\n  const y = cy + radius * Math.sin(angle)\n  return { x, y };\n}\n\nconst Circle = ({\n  text,\n  size,\n  ringRadius,\n  angle,\n  styles = {},\n  spinDirection = -1,\n  spin = null,\n  center = null\n}) => {\n  let [ cAngle, setAngle ] = useState(angle)\n  let [ hovering, setHover ] = useState(false)\n\n  useEffect(() => {\n    let interval\n\n    if (spin)\n      interval = setInterval(() => {\n        if (!hovering)\n          setAngle(cAngle + spinDirection)\n      }, 20);\n\n    return () => clearInterval(interval)\n  })\n\n  let style = {\n    ...styles,\n    width: `${size}px`,\n    height: `${size}px`\n  }\n\n  if (!center) {\n    let { x, y } = xyOnCircle(ringRadius, cAngle, ringRadius, ringRadius)\n    x -= (size / 2)\n    y -= (size / 2)\n\n    style.top = `${x}px`\n    style.left = `${y}px`\n  }\n\n  if (hovering) {\n    style.borderColor = '#0074D9'\n    style.boxShadow = '0px 0px 20px 0px hsla(208, 100%, 85%, 1.0)'\n  }\n\n  return (\n    <div\n      className=\"circle\"\n      style={style}\n      onMouseEnter={() => setHover(true)}\n      onMouseLeave={() => setHover(false)}\n    >\n      {text}\n    </div>\n  )\n}\n\nexport default Circle\n","import React from 'react'\nimport './Ring.css'\n\nconst noop = () => {}\n\nconst Ring = ({\n  size,\n  color = '#6F7278',\n  onMouseEnter = noop,\n  onMouseLeave = noop,\n  children\n}) => {\n  let style = {\n    width: `${size}px`,\n    height: `${size}px`,\n    borderColor: color\n  }\n\n  return (\n    <div\n      className=\"ring\"\n      style={style}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default Ring\n","import React, { useState } from 'react'\nimport Projects from './Projects'\nimport Circle from './Circle'\nimport Ring from './Ring'\nimport './App.css'\n\nconst InnerRing = ({ circleSize }) => {\n  let ringSize = circleSize * 3.5\n  \n  return (\n    <Ring size={ringSize}>\n      <Circle\n        text=\"ME\"\n        size={circleSize}\n        styles={{\n          color: '#fff',\n          borderWidth: '5px',\n          borderColor: '#fff'\n        }}\n        center\n      />\n\n      <Circle\n        text=\"Libft\"\n        angle={0}\n        size={circleSize}\n        ringRadius={ringSize / 2}\n        spin\n      />\n    </Ring>\n  )\n}\n\nconst RingTwo = ({\n  circleSize,\n  children,\n  onMouseEnter,\n  onMouseLeave\n}) => {\n  let ringSize = circleSize * 3.5 * 2\n  \n  return (\n    <Ring\n      size={ringSize}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n    >\n      <Circle\n        text=\"Portfolio\"\n        angle={50}\n        size={circleSize}\n        ringRadius={ringSize / 2}\n        spinDirection={1}\n        spin\n      />\n\n      {children}\n    </Ring>\n  )\n}\n\nconst App = () => {\n  const circleSize = 50\n\n  return (\n    <Projects>\n      <RingTwo\n        circleSize={circleSize}\n        onMouseEnter={() => console.log('hovering')}\n        onMouseLeave={() => console.log('leaving')}\n      >\n        <InnerRing\n          circleSize={circleSize}\n        />\n      </RingTwo>\n    </Projects>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}